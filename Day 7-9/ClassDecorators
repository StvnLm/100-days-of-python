class decorator_class(object):
    def __init__(self, original_function):
        self.original_function = original_function

    def __call__(self, *args, **kwargs):
        print("Wrapper executed this before {}".format(self.original_function.__name__))
        return self.original_function(*args, **kwargs)


def decorator_function(original_function):
    def wrapper_function(*args, **kwargs):
        print("Wrapper executed this before {}".format(original_function.__name__))
        return original_function(*args, **kwargs)
    return wrapper_function


@decorator_class
def display():
    print('Display function ran')

display()

@decorator_class
def display_info(name, age):
    print("Display info ran with the arguements ({}, {})".format(name,age))


display
display()
display_info
display_info("John", 25)
