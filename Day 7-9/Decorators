from functools import wraps

def decorator_function(original_function):
    def wrapper_function(*args, **kwargs):
        print("Wrapper executed this before {}".format(original_function.__name__))
        return original_function(*args, **kwargs)
    return wrapper_function

def my_logger(orig_func):
    import logging
    logging.basicConfig(filename='{}.log'.format(orig_func.__name__), level=logging.INFO)

    @wraps(orig_func)
    def wrapper(*args, **kwargs):
        logging.info(
            "Ran with args: {}, and kwargs: {}".format(args, kwargs))
        return orig_func(*args, **kwargs)

    return wrapper

def my_timer(orig_func):
    import time

    @wraps(orig_func)
    def wrapper(*args, **kwargs):
        start_time = time.time()
        result = orig_func(*args, **kwargs)
        execution_time = time.time() - start_time
        print(f'{orig_func.__name__} ran in: {execution_time}')
        return result

    return wrapper

# @decorator_function is the same as display = decorator_function(display)
@decorator_function
def display():
    print('Display function ran')

@my_logger
@my_timer
def display_info(name, age):
    import time
    time.sleep(1)
    print("display info ran with the arguements ({}, {})".format(name,age))

# display()
display_info("Hank", 22)
# display_info = my_timer(display_info)
